"""
This security layer handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py reference_monitor_sys8910.r2py attackcase.r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'          
    
    try:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
    except (RepyArgumentError, FileInUseError, ResourceExhaustedError, FileNotFoundError):
      exitall()
    
    filecontenT=""
    try:    
      filecontenT = self.Afile.readat(None,0)         
    except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
      exitall()    
    
    if filecontenT=="" and create:
      try:     
        self.Afile.writeat('SE',0)    
      except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
        exitall()
     
   
  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    try:     
      self.Bfile.writeat(data,offset)     
    except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
      exitall()
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    readcontent = ""

    try:    
      readcontent = self.Afile.readat(bytes,offset)     
    except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
      exitall()

    return readcontent

  def close(self):
   
    try:
      filecontent = self.Bfile.readat(None,0)     
    except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
      exitall()
    
    if filecontent[0]=='S' and filecontent[-1]=='E':
      try:
        self.Afile.writeat(filecontent,0)
      except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
        exitall()

    try:
      self.Afile.close()
      self.Bfile.close()
    except FileClosedError:
      exitall()

def ABopenfile(filename, create):
  return ABFile(filename,create)



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

